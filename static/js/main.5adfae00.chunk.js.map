{"version":3,"sources":["reportWebVitals.ts","state/Apollo/client.ts","state/Apollo/index.tsx","state/index.tsx","components/ListItem/index.tsx","features/Countries/components/CountryInfo.tsx","features/Countries/graphql/fragments/countryBasicFieldsFragment.ts","features/Countries/graphql/queries/countryQuery.ts","features/Countries/models/countryModel.ts","features/Countries/hooks/useCountry.ts","components/Placeholder/index.tsx","features/Countries/components/LoadingCountry.tsx","assets/imgs/no-search-results-icon.svg","routes/routing.ts","features/Countries/components/EmptyCountry.tsx","features/Countries/components/CountryMap.tsx","features/Countries/views/Country.tsx","components/Button/index.tsx","components/TextField/index.tsx","features/Countries/components/SearchForm.tsx","features/Countries/graphql/queries/filtersQuery.ts","features/Countries/hooks/useFilters.ts","features/Countries/components/Sidebar.tsx","features/Countries/components/Filters.tsx","features/Countries/graphql/queries/searchCountriesQuery.ts","features/Countries/hooks/useCountries.ts","components/DescriptionCard/index.tsx","features/Countries/components/CountriesList.tsx","features/Countries/views/index.tsx","components/Layout/index.tsx","routes/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","process","cache","InMemoryCache","Provider","children","AppProvider","Apollo","ListItem","icon","label","value","className","data-testid","CountryInfo","preTitle","title","img","src","alt","countryBasicFieldsFragment","gql","countryQuery","countryModel","country","x","languages","officialLanguages","map","lang","name","join","currencies","cur","symbol","callingCodes","code","id","_id","flag","svgFile","alpha2Code","capital","region","subregion","demonym","population","toString","replace","useCountry","useQuery","variables","loading","error","data","refetch","useMemo","Country","Placeholder","LoadingCountry","routes","EmptyCountry","to","EmptyImg","CountryMap","countryName","frameBorder","style","border","allowFullScreen","alphaCode","useParams","buttonStyles","solid","outline","Button","variant","onClick","type","buttonVariant","TextField","autoComplete","placeholder","onInput","SearchForm","onSubmit","useState","search","setSearch","e","preventDefault","target","searchFiltersQuery","useFilters","filtersQuery","parseToFilterOptions","items","item","currencyOptions","Currency","languageOptions","Language","regionOptions","Region","Sidebar","Filters","onChange","language","currency","filters","setFilters","handleChange","filter","option","newFilters","options","isClearable","searchCountriesQuery","useCountries","loadingMore","setLoadingMore","hasNextPage","setHasNextPage","queryVars","toUpperCase","str","charAt","slice","toLowerCase","push","currencies_single","officialLanguages_single","length","offset","convertFiltersToQueryVars","onCompleted","fetchMore","countries","totalResults","showingResults","isEmpty","loadNextPage","updateQuery","prevResult","prevData","newData","fetchMoreResult","DescriptionCard","supText","titleImg","descriptionList","key","n","CountriesList","history","useHistory","infiniteRef","useInfiniteScroll","onLoadMore","haveMultipleResults","ref","slug","Countries","prevFilters","Layout","Routes","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5adfae00.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPHQL_API,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n","import { ApolloProvider } from \"@apollo/client\";\r\nimport client from \"./client\";\r\n\r\nconst Provider: React.FC = ({ children }) => {\r\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n};\r\n\r\nexport default Provider;\r\n","import ApolloProvider from \"./Apollo\";\r\n\r\nconst AppProvider: React.FC = ({ children }) => {\r\n  return <ApolloProvider>{children}</ApolloProvider>;\r\n};\r\n\r\nexport default AppProvider;\r\n","interface IProps {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  value: string;\r\n  className?: string;\r\n}\r\n\r\nconst ListItem: React.FC<IProps> = ({ icon, label, value, className = \"\" }) => {\r\n  return (\r\n    <div className={`flex mb-8 ${className}`} data-testid=\"ListItem\">\r\n      <div className=\"flex-shrink-0\">\r\n        <div className=\"flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 text-white\">\r\n          {icon}\r\n        </div>\r\n      </div>\r\n      <div className=\"ml-4\">\r\n        <dt className=\"text-lg leading-6 font-medium text-gray-900\">{label}</dt>\r\n        <dd className=\"mt-2 text-base text-gray-500\">{value}</dd>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","interface IProps {\r\n  preTitle: string;\r\n  title: string;\r\n  img: string;\r\n}\r\n\r\nconst CountryInfo: React.FC<IProps> = ({ preTitle, title, img }) => {\r\n  return (\r\n    <div className=\"lg:text-center md:w-1/2\" data-testid=\"CountryInfo\">\r\n      <p className=\"text-base text-indigo-600 font-semibold tracking-wide uppercase\">\r\n        {preTitle}\r\n      </p>\r\n      <h2 className=\"mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl\">\r\n        {title}\r\n      </h2>\r\n      <div className=\"mt-4 max-w-2xl lg:mx-auto\">\r\n        <img\r\n          className=\"max-w-xs w-full lg:mx-auto shadow\"\r\n          src={img}\r\n          alt={`${title}`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst countryBasicFieldsFragment = gql`\r\n  fragment countryBasicFields on Country {\r\n    _id\r\n    alpha2Code\r\n    capital\r\n    name\r\n    officialLanguages {\r\n      name\r\n    }\r\n    flag {\r\n      svgFile\r\n    }\r\n    currencies {\r\n      name\r\n      symbol\r\n    }\r\n    subregion {\r\n      region {\r\n        name\r\n      }\r\n    }\r\n    callingCodes {\r\n      name\r\n    }\r\n    population\r\n  }\r\n`;\r\n\r\nexport default countryBasicFieldsFragment;\r\n","import { gql } from \"@apollo/client\";\r\nimport countryBasicFieldsFragment from \"../fragments/countryBasicFieldsFragment\";\r\n\r\nconst countryQuery = gql`\r\n  query countryQuery($alpha2Code: String) {\r\n    Country(alpha2Code: $alpha2Code) {\r\n      ...countryBasicFields\r\n      demonym\r\n      callingCodes {\r\n        name\r\n      }\r\n      population\r\n    }\r\n  }\r\n\r\n  ${countryBasicFieldsFragment}\r\n`;\r\n\r\nexport default countryQuery;\r\n","import { countryFields } from \"../graphql/types/countryDataType\";\r\n\r\nfunction countryModel(country: countryFields) {\r\n  const unknownValue = \"null\";\r\n\r\n  const numberWithCommas = (x: number) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n\r\n  const languages = country?.officialLanguages\r\n    .map((lang) => lang.name)\r\n    .join(\", \");\r\n\r\n  const currencies = country.currencies\r\n    .map(\r\n      (cur) =>\r\n        `${cur.name} ${cur.symbol !== unknownValue ? `(${cur.symbol})` : \"\"}`\r\n    )\r\n    .join(\", \");\r\n\r\n  const callingCodes = country.callingCodes\r\n    ?.map((code) => `+${code.name}`)\r\n    .join(\", \");\r\n\r\n  return {\r\n    id: country._id,\r\n    name: country.name,\r\n    flag: country.flag.svgFile,\r\n    alpha2Code: country.alpha2Code,\r\n    capital: country.capital,\r\n    languages,\r\n    currencies,\r\n    region: country.subregion?.region.name,\r\n    demonym: country.demonym || \"\",\r\n    callingCodes: callingCodes || \"\",\r\n    population: country.population ? numberWithCommas(country.population) : \"\",\r\n  };\r\n}\r\nexport default countryModel;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { useMemo } from \"react\";\r\nimport countryQuery from \"../graphql/queries/countryQuery\";\r\nimport countryDataType from \"../graphql/types/countryDataType\";\r\nimport countryVarsType from \"../graphql/types/countryVarsType\";\r\nimport countryModel from \"../models/countryModel\";\r\n\r\nfunction useCountry(alpha2Code: string) {\r\n  const { loading, error, data, refetch } = useQuery<\r\n    countryDataType,\r\n    countryVarsType\r\n  >(countryQuery, { variables: { alpha2Code } });\r\n\r\n  const country = useMemo(() => {\r\n    if (!data) return null;\r\n\r\n    return countryModel(data.Country[0]);\r\n  }, [data]);\r\n\r\n  return { loading, error, country, refetch };\r\n}\r\n\r\nexport default useCountry;\r\n","interface IProps {\r\n  className?: string;\r\n}\r\n\r\nconst Placeholder: React.FC<IProps> = ({ className = \"\" }) => {\r\n  return (\r\n    <div\r\n      className={`animate-pulse rounded-md bg-gray-200 ${className}`}\r\n      data-testid=\"Placeholder\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Placeholder;\r\n","import Placeholder from \"components/Placeholder\";\r\n\r\nconst LoadingCountry: React.FC = () => {\r\n  return (\r\n    <div className=\"py-12 bg-white mt-16\" data-testid=\"LoadingCountry\">\r\n      <div className=\"max-w-7xl mx-auto md:flex items-center\">\r\n        <Placeholder className=\"md:w-1/2 h-96 mx-4 sm:mx-6 lg:mx-8 mb-8\" />\r\n        <Placeholder className=\"md:w-1/2 h-96 mx-4 sm:mx-6 lg:mx-8 mb-8\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingCountry;\r\n","export default __webpack_public_path__ + \"static/media/no-search-results-icon.67119f84.svg\";","export const routes = {\r\n  home: \"/\",\r\n  country: \"/:alphaCode\",\r\n};\r\n","import EmptyImg from \"assets/imgs/no-search-results-icon.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { routes } from \"routes/routing\";\r\n\r\nconst EmptyCountry: React.FC = () => {\r\n  return (\r\n    <div className=\"py-12 bg-white mt-16\" data-testid=\"EmptyCountry\">\r\n      <div className=\"max-w-7xl mx-auto md:flex items-center\">\r\n        <div className=\"md:w-1/2 sm:mx-6 lg:mx-8 mb-8 flex justify-center\">\r\n          <p className=\"mb-16 text-gray-900 text-center my-8 text-lg max-w-xs\">\r\n            No tenemos información disponible del país solicitado.{\" \"}\r\n            <Link\r\n              to={routes.home}\r\n              className=\"text-indigo-600 hover:text-indigo-800 font-medium\"\r\n            >\r\n              Buscar otro país\r\n            </Link>\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"md:w-1/2 sm:mx-6 lg:mx-8 mb-8\">\r\n          <img\r\n            src={EmptyImg}\r\n            alt=\"No tenemos información disponible del país solicitado\"\r\n            className=\"max-w-sm w-full mx-auto\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyCountry;\r\n","interface IProps {\r\n  countryName: string;\r\n  className?: string;\r\n}\r\n\r\nconst CountryMap: React.FC<IProps> = ({ countryName, className = \"\" }) => {\r\n  const key = process.env.REACT_APP_GOOGLE_MAPS_KEY;\r\n\r\n  return (\r\n    <iframe\r\n      data-testid=\"CountryMap\"\r\n      className={`bg-gray-200 ${className}`}\r\n      title={countryName}\r\n      frameBorder=\"0\"\r\n      style={{ border: 0 }}\r\n      src={`https://www.google.com/maps/embed/v1/place?key=${key}&q=${countryName}`}\r\n      allowFullScreen\r\n    />\r\n  );\r\n};\r\n\r\nexport default CountryMap;\r\n","import ListItem from \"components/ListItem\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CountryInfo from \"../components/CountryInfo\";\r\nimport useCountry from \"../hooks/useCountry\";\r\nimport {\r\n  MapPin,\r\n  MessageSquare,\r\n  Flag,\r\n  PhoneCall,\r\n  DollarSign,\r\n  Users,\r\n} from \"react-feather\";\r\nimport LoadingCountry from \"../components/LoadingCountry\";\r\nimport EmptyCountry from \"../components/EmptyCountry\";\r\nimport CountryMap from \"../components/CountryMap\";\r\n\r\nconst Country: React.FC = () => {\r\n  const { alphaCode } = useParams<{ alphaCode: string }>();\r\n  const { loading, error, country } = useCountry(alphaCode);\r\n\r\n  if (loading) return <LoadingCountry />;\r\n\r\n  if (error || !country) return <EmptyCountry />;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"py-12 bg-white my-8\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 md:flex items-center\">\r\n          <CountryInfo\r\n            preTitle={country.region}\r\n            title={country.name}\r\n            img={country.flag}\r\n          />\r\n\r\n          <div className=\"md:w-1/2 md:flex md:justify-center md:items-center md:border-l md:border-gray-400 mt-12 md:mt-0\">\r\n            <dl className=\"md:flex md:flex-col\">\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<MapPin />}\r\n                label=\"Capital\"\r\n                value={country.capital}\r\n              />\r\n\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<MessageSquare />}\r\n                label=\"Idioma(s)\"\r\n                value={country.languages}\r\n              />\r\n\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<DollarSign />}\r\n                label=\"Moneda(s)\"\r\n                value={country.currencies}\r\n              />\r\n\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<Flag />}\r\n                label=\"Nacionalidad\"\r\n                value={country.demonym}\r\n              />\r\n\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<Users />}\r\n                label=\"Población\"\r\n                value={country.population}\r\n              />\r\n\r\n              <ListItem\r\n                className=\"mb-8\"\r\n                icon={<PhoneCall />}\r\n                label=\"Prefijo telefónico\"\r\n                value={country.callingCodes}\r\n              />\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <CountryMap className=\"w-full h-96\" countryName={country.name} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","interface IProps {\r\n  variant?: \"solid\" | \"outline\";\r\n  onClick?: () => void;\r\n  type?: \"button\" | \"submit\";\r\n}\r\n\r\nexport const buttonStyles: {\r\n  solid: string;\r\n  outline: string;\r\n} = {\r\n  solid: \"border-transparent bg-indigo-600 hover:bg-indigo-700 text-white\",\r\n  outline: \"border-indigo-600 bg-white hover:bg-indigo-50 text-indigo-600\",\r\n};\r\n\r\nconst Button: React.FC<IProps> = ({\r\n  children,\r\n  variant = \"solid\",\r\n  onClick,\r\n  type = \"button\",\r\n}) => {\r\n  const buttonVariant = buttonStyles[variant] || buttonStyles.solid;\r\n\r\n  return (\r\n    <button\r\n      className={`flex-none inline-flex focus:outline-none items-center justify-center px-3 py-2 border text-sm font-medium rounded-md ${buttonVariant}`}\r\n      onClick={onClick}\r\n      type={type}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","interface IProps {\r\n  autoComplete?: string;\r\n  placeholder?: string;\r\n  name?: string;\r\n  onInput?: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  value?: string;\r\n}\r\n\r\nconst TextField: React.FC<IProps> = ({\r\n  autoComplete = \"\",\r\n  placeholder = \"\",\r\n  name = \"\",\r\n  onInput,\r\n  value,\r\n}) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name={name}\r\n      onInput={onInput}\r\n      autoComplete={autoComplete}\r\n      placeholder={placeholder}\r\n      className=\"p-2 px-3 leading-3 text-gray-900 focus:border-indigo-500 block w-full sm:text-md border-2 border-gray-300 rounded-md focus:outline-none\"\r\n      value={value}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","import Button from \"components/Button\";\r\nimport TextField from \"components/TextField\";\r\nimport { useState } from \"react\";\r\n\r\ninterface IProps {\r\n  onSubmit?: (search: string) => void;\r\n}\r\n\r\nconst SearchForm: React.FC<IProps> = ({ onSubmit }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (onSubmit) onSubmit(search);\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setSearch((e.target as HTMLInputElement).value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"px-4 md:px-8 md:text-center my-4 md:mt-24 md:mb-20\"\r\n      data-testid=\"SearchForm\"\r\n    >\r\n      <p className=\"mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl\">\r\n        ¿Qué país estas buscando?\r\n      </p>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"mt-6 max-w-2xl md:mx-auto flex items-center\"\r\n      >\r\n        <div className=\"flex-auto mr-4\">\r\n          <TextField\r\n            value={search}\r\n            name=\"search\"\r\n            placeholder=\"Escribe un país(en inglés) o un alpha2code\"\r\n            autoComplete=\"searchCountry\"\r\n            onInput={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <Button type=\"submit\">BUSCAR</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst searchFiltersQuery = gql`\r\n  query {\r\n    Language(orderBy: name_asc, filter: { name_not: \"null\" }) {\r\n      _id\r\n      name\r\n    }\r\n\r\n    Currency(orderBy: name_asc, filter: { name_not: \"null\" }) {\r\n      _id\r\n      name\r\n    }\r\n\r\n    Region(orderBy: name_asc, filter: { name_not: \"null\" }) {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default searchFiltersQuery;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { useMemo } from \"react\";\r\nimport filtersQuery from \"../graphql/queries/filtersQuery\";\r\nimport filterType from \"../graphql/types/filterType\";\r\nimport searchFilterDataTypes from \"../graphql/types/searchFilterDataTypes\";\r\n\r\nfunction useFilters() {\r\n  const { loading, error, data, refetch } = useQuery<searchFilterDataTypes>(\r\n    filtersQuery,\r\n    {}\r\n  );\r\n\r\n  const parseToFilterOptions = (items: filterType[]) => {\r\n    return items.map((item) => ({ value: item.name, label: item.name }));\r\n  };\r\n\r\n  const { currencyOptions, languageOptions, regionOptions } = useMemo(() => {\r\n    if (!data)\r\n      return { currencyOptions: [], languageOptions: [], regionOptions: [] };\r\n\r\n    return {\r\n      currencyOptions: parseToFilterOptions(data.Currency),\r\n      languageOptions: parseToFilterOptions(data.Language),\r\n      regionOptions: parseToFilterOptions(data.Region),\r\n    };\r\n  }, [data]);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    currencyOptions,\r\n    languageOptions,\r\n    regionOptions,\r\n    refetch,\r\n  };\r\n}\r\n\r\nexport default useFilters;\r\n","interface IProps {\r\n  title: string;\r\n}\r\n\r\nconst Sidebar: React.FC<IProps> = ({ children, title }) => {\r\n  return (\r\n    <aside className=\"md:w-80 md:pr-4 flex-none pb-8\" data-testid=\"Sidebar\">\r\n      <div className=\"bg-white shadow sm:rounded-lg p-4\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{title}</h3>\r\n\r\n        {children}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import Select, { ValueType } from \"react-select\";\r\nimport Placeholder from \"components/Placeholder\";\r\nimport useFilters from \"../hooks/useFilters\";\r\nimport Button from \"components/Button\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { useState } from \"react\";\r\n\r\nexport type filtersOptionsType = {\r\n  language: string | null;\r\n  currency: string | null;\r\n  region: string | null;\r\n};\r\n\r\ninterface IProps {\r\n  onChange?: (filters: filtersOptionsType) => void;\r\n}\r\n\r\nconst Filters: React.FC<IProps> = ({ onChange }) => {\r\n  const title = \"Filtrar\";\r\n\r\n  const {\r\n    currencyOptions,\r\n    languageOptions,\r\n    regionOptions,\r\n    loading,\r\n    error,\r\n    refetch,\r\n  } = useFilters();\r\n\r\n  const [filters, setFilters] = useState<filtersOptionsType>({\r\n    language: null,\r\n    currency: null,\r\n    region: null,\r\n  });\r\n\r\n  const handleChange = (filter: \"language\" | \"currency\" | \"region\") => (\r\n    option: ValueType<\r\n      {\r\n        value: string;\r\n        label: string;\r\n      },\r\n      false\r\n    >\r\n  ) => {\r\n    const newFilters = {\r\n      ...filters,\r\n      [filter]: option?.value || null,\r\n    };\r\n\r\n    setFilters(newFilters);\r\n\r\n    if (onChange) onChange(newFilters);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <Sidebar title={title}>\r\n        <p className=\"mb-4\">\r\n          Ha ocurrido un error al cargar los filtros por favor intente\r\n          nuevamente\r\n        </p>\r\n\r\n        <Button onClick={() => refetch()}>Reintentar</Button>\r\n      </Sidebar>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Sidebar title={title}>\r\n        <Placeholder className=\"mb-4 h-8\" />\r\n        <Placeholder className=\"mb-4 h-8\" />\r\n        <Placeholder className=\"mb-4 h-8\" />\r\n      </Sidebar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Sidebar title={title}>\r\n      <Select\r\n        className=\"mb-4\"\r\n        options={regionOptions}\r\n        placeholder=\"Por región\"\r\n        onChange={handleChange(\"region\")}\r\n        isClearable\r\n      />\r\n      <Select\r\n        className=\"mb-4\"\r\n        options={languageOptions}\r\n        placeholder=\"Por idioma\"\r\n        onChange={handleChange(\"language\")}\r\n        isClearable\r\n      />\r\n      <Select\r\n        className=\"mb-4\"\r\n        options={currencyOptions}\r\n        placeholder=\"Por moneda\"\r\n        onChange={handleChange(\"currency\")}\r\n        isClearable\r\n      />\r\n    </Sidebar>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { gql } from \"@apollo/client\";\r\nimport countryBasicFieldsFragment from \"../fragments/countryBasicFieldsFragment\";\r\n\r\nconst searchCountriesQuery = gql`\r\n  query searchCountriesQuery(\r\n    $alpha2Code: String\r\n    $name: String\r\n    $filter: [_CountryFilter!]\r\n    $offset: Int\r\n  ) {\r\n    totalResults: Country(\r\n      filter: {\r\n        name_not: \"null\"\r\n        OR: [\r\n          { alpha2Code_contains: $alpha2Code, AND: $filter }\r\n          { name_starts_with: $name, AND: $filter }\r\n        ]\r\n      }\r\n    ) {\r\n      _id\r\n    }\r\n\r\n    Country(\r\n      filter: {\r\n        name_not: \"null\"\r\n        OR: [\r\n          { alpha2Code_contains: $alpha2Code, AND: $filter }\r\n          { name_starts_with: $name, AND: $filter }\r\n        ]\r\n      }\r\n      orderBy: name_asc\r\n      offset: $offset\r\n      first: 20\r\n    ) {\r\n      ...countryBasicFields\r\n    }\r\n  }\r\n\r\n  ${countryBasicFieldsFragment}\r\n`;\r\n\r\nexport default searchCountriesQuery;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { filterCountries } from \"../components/CountriesList\";\r\nimport searchCountriesQuery from \"../graphql/queries/searchCountriesQuery\";\r\nimport countryListDataType from \"../graphql/types/countryListDataType\";\r\nimport countryListVarsType, {\r\n  filterVarType,\r\n} from \"../graphql/types/countryListVarsType\";\r\nimport countryModel from \"../models/countryModel\";\r\n\r\nfunction useCountries(filters: filterCountries) {\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [hasNextPage, setHasNextPage] = useState(true);\r\n  const queryVars = convertFiltersToQueryVars(filters);\r\n  const { loading, error, data, refetch, fetchMore } = useQuery<\r\n    countryListDataType,\r\n    countryListVarsType\r\n  >(searchCountriesQuery, {\r\n    variables: queryVars,\r\n    onCompleted: () => setHasNextPage(true),\r\n  });\r\n\r\n  const countries = useMemo(() => {\r\n    if (!data) return null;\r\n\r\n    const parsedCountries = data.Country.map((country) =>\r\n      countryModel(country)\r\n    );\r\n\r\n    return parsedCountries;\r\n  }, [data]);\r\n\r\n  const totalResults = data?.totalResults.length || 0;\r\n  const showingResults = countries?.length || 0;\r\n\r\n  const loadNextPage = () => {\r\n    setLoadingMore(true);\r\n    fetchMore({\r\n      variables: {\r\n        offset: showingResults,\r\n      },\r\n      updateQuery: (prevResult, { fetchMoreResult }) => {\r\n        const prevData = prevResult as countryListDataType;\r\n        const newData = fetchMoreResult as countryListDataType;\r\n\r\n        setLoadingMore(false);\r\n        setHasNextPage(!!newData.Country.length);\r\n\r\n        newData.Country = [...prevData.Country, ...newData.Country];\r\n\r\n        return newData;\r\n      },\r\n    });\r\n  };\r\n\r\n  function capitalizeFirstLetter(str: string) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n  }\r\n\r\n  function convertFiltersToQueryVars(filters: filterCountries) {\r\n    const alpha2Code = filters.search.toUpperCase();\r\n    const name = capitalizeFirstLetter(filters.search);\r\n\r\n    let filter: filterVarType[] = [];\r\n\r\n    if (filters.currency)\r\n      filter.push({\r\n        currencies_single: {\r\n          name: filters.currency,\r\n        },\r\n      });\r\n\r\n    if (filters.language)\r\n      filter.push({\r\n        officialLanguages_single: {\r\n          name: filters.language,\r\n        },\r\n      });\r\n\r\n    if (filters.region)\r\n      filter.push({\r\n        subregion: {\r\n          region: {\r\n            name: filters.region,\r\n          },\r\n        },\r\n      });\r\n\r\n    if (filter.length)\r\n      return {\r\n        alpha2Code,\r\n        name,\r\n        filter,\r\n        offset: 0,\r\n      };\r\n\r\n    return {\r\n      alpha2Code,\r\n      name,\r\n      offset: 0,\r\n    };\r\n  }\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    refetch,\r\n    countries,\r\n    totalResults,\r\n    isEmpty: totalResults === 0,\r\n    loadNextPage,\r\n    loadingMore,\r\n    hasNextPage,\r\n    showingResults,\r\n  };\r\n}\r\n\r\nexport default useCountries;\r\n","import Button from \"components/Button\";\r\n\r\ntype ListItem = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ninterface IProps {\r\n  title: string;\r\n  supText: string;\r\n  titleImg: string;\r\n  descriptionList: ListItem[];\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst DescriptionCard: React.FC<IProps> = ({\r\n  title,\r\n  supText,\r\n  titleImg,\r\n  descriptionList,\r\n  className,\r\n  onClick,\r\n}) => {\r\n  const isEven = (n: number) => n % 2 === 0;\r\n\r\n  return (\r\n    <div\r\n      className={`bg-white shadow overflow-hidden sm:rounded-lg ${className}`}\r\n      data-testid=\"DescriptionCard\"\r\n    >\r\n      <div className=\"px-4 py-5 sm:px-6 flex items-center justify-start\">\r\n        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\r\n          {title} <sup>{supText}</sup>\r\n        </h3>\r\n        <div className=\"flex-none mx-4\">\r\n          <img\r\n            className=\"w-10 shadow\"\r\n            src={titleImg}\r\n            alt={`bandera de ${title}`}\r\n          />\r\n        </div>\r\n        <div className=\"ml-auto\">\r\n          <Button variant=\"outline\" onClick={onClick}>\r\n            Ver detalle\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"border-t border-gray-200\">\r\n        <dl>\r\n          {descriptionList.map(({ label, value }, key) => (\r\n            <div\r\n              key={`descriptionListItem-${value}`}\r\n              className={`px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 ${\r\n                isEven(key) ? \"bg-gray-50\" : \"bg-white\"\r\n              }`}\r\n              data-testid=\"DescriptionCard__ListItem\"\r\n            >\r\n              <dt className=\"text-sm font-medium text-gray-500\">{label}</dt>\r\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\r\n                {value}\r\n              </dd>\r\n            </div>\r\n          ))}\r\n        </dl>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DescriptionCard;\r\n","import Button from \"components/Button\";\r\nimport useCountries from \"../hooks/useCountries\";\r\nimport DescriptionCard from \"components/DescriptionCard\";\r\nimport Placeholder from \"components/Placeholder\";\r\nimport { filtersOptionsType } from \"./Filters\";\r\nimport EmptyImg from \"assets/imgs/no-search-results-icon.svg\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\r\n\r\nexport type filterCountries = { search: string } & filtersOptionsType;\r\n\r\ninterface IProps {\r\n  filters: filterCountries;\r\n}\r\n\r\nconst CountriesList: React.FC<IProps> = ({ filters }) => {\r\n  const {\r\n    loading,\r\n    error,\r\n    countries,\r\n    refetch,\r\n    totalResults,\r\n    isEmpty,\r\n    loadNextPage,\r\n    loadingMore,\r\n    hasNextPage,\r\n    showingResults,\r\n  } = useCountries(filters);\r\n\r\n  const history = useHistory();\r\n\r\n  const infiniteRef = useInfiniteScroll({\r\n    loading: loadingMore,\r\n    hasNextPage,\r\n    onLoadMore: loadNextPage,\r\n  });\r\n\r\n  const goToDetail = (slug: string) => () => {\r\n    history.push(`/${slug}`);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex-auto md:pl-4\">\r\n        <p className=\"mb-4 text-gray-900\">\r\n          Ha ocurrido un error al cargar los países por favor intente nuevamente\r\n        </p>\r\n\r\n        <Button onClick={() => refetch()}>Reintentar</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex-auto md:pl-4\">\r\n        <Placeholder className=\"h-72 mb-8\" />\r\n        <Placeholder className=\"h-72 mb-8\" />\r\n        <Placeholder className=\"h-72 mb-8\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <div className=\"flex-auto md:pl-4\">\r\n        <p className=\"mb-16 text-gray-900 text-center my-8 text-lg\">\r\n          No se encontraron resultados :(\r\n        </p>\r\n\r\n        <img\r\n          src={EmptyImg}\r\n          alt=\"No se encontraron resultados\"\r\n          className=\"max-w-sm w-full mx-auto\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const haveMultipleResults = totalResults > 1;\r\n  return (\r\n    <div className=\"flex-auto md:pl-4 relative\">\r\n      <div className=\"my-4 text-sm text-gray-900 md:absolute left-0 top-0 ml-6 md:-mt-8\">\r\n        Mostrando {showingResults} de{\" \"}\r\n        <strong>\r\n          {totalResults} resultado{haveMultipleResults ? \"s\" : \"\"}\r\n        </strong>\r\n      </div>\r\n\r\n      <div ref={infiniteRef as any}>\r\n        {countries?.map(\r\n          ({\r\n            name,\r\n            flag,\r\n            alpha2Code,\r\n            capital,\r\n            languages,\r\n            currencies,\r\n            region,\r\n            id,\r\n          }) => (\r\n            <DescriptionCard\r\n              className=\"mb-8\"\r\n              key={`DescriptionCard-${id}`}\r\n              title={name}\r\n              titleImg={flag}\r\n              supText={alpha2Code}\r\n              onClick={goToDetail(alpha2Code)}\r\n              descriptionList={[\r\n                { label: \"Capital\", value: capital },\r\n                {\r\n                  label: \"Idioma(s)\",\r\n                  value: languages,\r\n                },\r\n                {\r\n                  label: \"Moneda(s)\",\r\n                  value: currencies,\r\n                },\r\n                { label: \"Región\", value: region },\r\n              ]}\r\n            />\r\n          )\r\n        )}\r\n\r\n        {loadingMore && (\r\n          <>\r\n            <Placeholder className=\"h-72 mb-8\" />\r\n            <Placeholder className=\"h-72 mb-8\" />\r\n            <Placeholder className=\"h-72 mb-8\" />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesList;\r\n","import SearchForm from \"../components/SearchForm\";\r\nimport Filters, { filtersOptionsType } from \"../components/Filters\";\r\nimport React, { useState } from \"react\";\r\nimport CountriesList, { filterCountries } from \"../components/CountriesList\";\r\n\r\nconst Countries: React.FC = () => {\r\n  const [filters, setFilters] = useState<filterCountries>({\r\n    search: \"\",\r\n    language: null,\r\n    currency: null,\r\n    region: null,\r\n  });\r\n\r\n  const handleSubmit = (search: string) => {\r\n    setFilters((prevFilters) => ({ ...prevFilters, search }));\r\n  };\r\n\r\n  const handleChange = (filters: filtersOptionsType) => {\r\n    setFilters((prevFilters) => ({ ...prevFilters, ...filters }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SearchForm onSubmit={handleSubmit} />\r\n\r\n      <div className=\"md:flex\">\r\n        <Filters onChange={handleChange} />\r\n\r\n        <CountriesList filters={filters} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import { Link } from \"react-router-dom\";\r\nimport { routes } from \"routes/routing\";\r\n\r\nconst Layout: React.FC = ({ children }) => {\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col\" data-testid=\"Layout\">\r\n      <header className=\"bg-white px-4 md:px-8 py-4 flex-none border-b boder-gray-400\">\r\n        <div className=\"max-w-7xl mx-auto\">\r\n          <Link\r\n            to={routes.home}\r\n            className=\"font-extrabold text-gray-900 text-xl hover:text-indigo-600\"\r\n          >\r\n            COUNTRYFINDER\r\n          </Link>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"md:px-8 flex-auto\">\r\n        <div className=\"max-w-7xl mx-auto w-full\">{children}</div>\r\n      </div>\r\n\r\n      <footer className=\"flex-none border-t border-gray-400 text-gray-900 text-center py-4 mt-16\">\r\n        Hecho por Renzo Telenta\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Country from \"features/Countries/views/Country\";\r\nimport Countries from \"features/Countries/views\";\r\nimport { routes } from \"./routing\";\r\nimport Layout from \"components/Layout\";\r\n\r\nconst Routes: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Layout>\r\n        <Switch>\r\n          <Route exact path={routes.home} component={Countries} />\r\n          <Route path={routes.country} component={Country} />\r\n        </Switch>\r\n      </Layout>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport AppProvider from \"state\";\r\nimport Routes from \"routes\";\r\nimport \"./global.css\";\r\n\r\nReactDOM.render(\r\n  <AppProvider>\r\n    <Routes />\r\n  </AppProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}